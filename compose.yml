services:
  live-server-dev:
    build:
      context: .
    container_name: web_live_server_dev
    stdin_open: true
    tty: true    
    ports:
      - "8081:8080"
    volumes:
      - ./src:/app:rw # Mount src to /app for live-server
    command: >
      sh -c "live-server --port=8080 --host=0.0.0.0 --no-browser --watch=. --wait=100"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    init: true
    restart: unless-stopped
    networks:
      - dev-network

  flask-dev:
    build:
      context: .
    container_name: web_flask_dev
    stdin_open: true
    tty: true
    env_file:
      - ./.env
    environment:
      - FLASK_ENV=development
      - PORT=8080
    ports:
      - "8082:8080"
    volumes:
      - ./app/flask:/app:rw # This now correctly mounts the folder containing app_flask.py
    command: ["gunicorn", "-w", "1", "--bind", "0.0.0.0:8080", "--reload", "app_flask:app"]
    healthcheck:
      test: ["CMD", "/usr/local/bin/healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    init: true
    restart: unless-stopped
    networks:
      - dev-network
   
  fastapi-dev:
    build:
      context: .
    container_name: web_fastapi_dev
    stdin_open: true
    tty: true
    env_file:
      - ./.env
    environment:
      - FLASK_ENV=development
      - PORT=8080
    ports:
      - "8083:8080"
    volumes:
      - ./app/fast:/app:rw # This now correctly mounts the folder containing app_fastapi.py
    command: ["uvicorn", "app_fastapi:app", "--host", "0.0.0.0", "--port", "8080", "--reload"]
    healthcheck:
      test: ["CMD", "/usr/local/bin/healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    init: true
    restart: unless-stopped
    networks:
      - dev-network

  node-dev:
    build:
      context: .
    container_name: web_node_dev
    env_file:
      - ./.env
    environment:
      - NODE_ENV=development
      - PORT=8080
    ports:
      - "8084:8080"
    volumes:
      - ./app/node:/app:rw # This now correctly mounts the folder containing app_node.js
      - /app/node_modules # This prevents the local node_modules from overwriting the container's
    # CORRECTED: No need to run npm install on every start
    command: ["npm", "run", "dev"]
    healthcheck:
      test: ["CMD", "/usr/local/bin/healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    init: true
    restart: unless-stopped
    networks:
      - dev-network

networks:
  dev-network:
    driver: bridge